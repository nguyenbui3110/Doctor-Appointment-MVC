// <auto-generated />
using System;
using DoctorAppointment.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorAppointment.Infrastructure.Migrations
{
    [DbContext(typeof(DrAppointmentDbContext))]
    partial class DrAppointmentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2012, 8, 19, 15, 19, 38, 285, DateTimeKind.Local).AddTicks(9774),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 7,
                            Status = 3
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2004, 10, 5, 0, 8, 49, 260, DateTimeKind.Local).AddTicks(4550),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 19,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2007, 8, 13, 18, 40, 8, 883, DateTimeKind.Local).AddTicks(97),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 20,
                            Status = 1
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2005, 5, 29, 18, 18, 28, 737, DateTimeKind.Local).AddTicks(7724),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 18,
                            Status = 1
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2008, 8, 18, 20, 14, 3, 232, DateTimeKind.Local).AddTicks(982),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 13,
                            Status = 2
                        },
                        new
                        {
                            Id = 6,
                            AppointmentDate = new DateTime(2020, 2, 26, 22, 9, 8, 887, DateTimeKind.Local).AddTicks(2866),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 3,
                            Status = 3
                        },
                        new
                        {
                            Id = 7,
                            AppointmentDate = new DateTime(2006, 4, 26, 3, 24, 14, 488, DateTimeKind.Local).AddTicks(8410),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 19,
                            Status = 2
                        },
                        new
                        {
                            Id = 8,
                            AppointmentDate = new DateTime(2012, 10, 15, 3, 13, 10, 776, DateTimeKind.Local).AddTicks(4000),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 20,
                            Status = 2
                        },
                        new
                        {
                            Id = 9,
                            AppointmentDate = new DateTime(2003, 6, 19, 18, 57, 58, 881, DateTimeKind.Local).AddTicks(7219),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 5,
                            Status = 3
                        },
                        new
                        {
                            Id = 10,
                            AppointmentDate = new DateTime(2022, 7, 24, 19, 3, 1, 90, DateTimeKind.Local).AddTicks(7914),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 9,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 3
                        },
                        new
                        {
                            Id = 11,
                            AppointmentDate = new DateTime(2004, 8, 11, 16, 36, 5, 663, DateTimeKind.Local).AddTicks(4515),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 13,
                            Status = 2
                        },
                        new
                        {
                            Id = 12,
                            AppointmentDate = new DateTime(2024, 5, 7, 15, 6, 8, 985, DateTimeKind.Local).AddTicks(9594),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            IsDeleted = false,
                            PatientId = 10,
                            Status = 2
                        },
                        new
                        {
                            Id = 13,
                            AppointmentDate = new DateTime(2022, 1, 17, 7, 17, 29, 723, DateTimeKind.Local).AddTicks(1479),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 3
                        },
                        new
                        {
                            Id = 14,
                            AppointmentDate = new DateTime(1999, 12, 8, 6, 30, 27, 483, DateTimeKind.Local).AddTicks(8883),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 13,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            AppointmentDate = new DateTime(1996, 5, 13, 3, 4, 9, 357, DateTimeKind.Local).AddTicks(7462),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 8,
                            IsDeleted = false,
                            PatientId = 13,
                            Status = 1
                        },
                        new
                        {
                            Id = 16,
                            AppointmentDate = new DateTime(2016, 7, 1, 10, 42, 34, 451, DateTimeKind.Local).AddTicks(4279),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            IsDeleted = false,
                            PatientId = 14,
                            Status = 3
                        },
                        new
                        {
                            Id = 17,
                            AppointmentDate = new DateTime(2000, 1, 24, 22, 53, 45, 690, DateTimeKind.Local).AddTicks(8785),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 15,
                            Status = 3
                        },
                        new
                        {
                            Id = 18,
                            AppointmentDate = new DateTime(1997, 9, 16, 18, 57, 35, 32, DateTimeKind.Local).AddTicks(4421),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 19,
                            AppointmentDate = new DateTime(1994, 12, 1, 7, 37, 3, 78, DateTimeKind.Local).AddTicks(4451),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 12,
                            Status = 1
                        },
                        new
                        {
                            Id = 20,
                            AppointmentDate = new DateTime(2003, 2, 12, 21, 33, 18, 701, DateTimeKind.Local).AddTicks(7820),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 9,
                            Status = 3
                        },
                        new
                        {
                            Id = 21,
                            AppointmentDate = new DateTime(2006, 7, 10, 23, 37, 27, 258, DateTimeKind.Local).AddTicks(3429),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 18,
                            Status = 3
                        },
                        new
                        {
                            Id = 22,
                            AppointmentDate = new DateTime(1997, 9, 30, 2, 37, 23, 752, DateTimeKind.Local).AddTicks(1069),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = 23,
                            AppointmentDate = new DateTime(2012, 12, 1, 15, 41, 2, 763, DateTimeKind.Local).AddTicks(2720),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 13,
                            Status = 3
                        },
                        new
                        {
                            Id = 24,
                            AppointmentDate = new DateTime(1996, 1, 23, 2, 29, 13, 310, DateTimeKind.Local).AddTicks(5557),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 9,
                            Status = 3
                        },
                        new
                        {
                            Id = 25,
                            AppointmentDate = new DateTime(2010, 3, 28, 22, 42, 4, 638, DateTimeKind.Local).AddTicks(4952),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 15,
                            Status = 3
                        },
                        new
                        {
                            Id = 26,
                            AppointmentDate = new DateTime(2020, 3, 24, 8, 52, 7, 150, DateTimeKind.Local).AddTicks(6628),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 27,
                            AppointmentDate = new DateTime(2008, 2, 11, 6, 38, 17, 315, DateTimeKind.Local).AddTicks(6517),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 15,
                            Status = 3
                        },
                        new
                        {
                            Id = 28,
                            AppointmentDate = new DateTime(2014, 8, 24, 21, 30, 0, 56, DateTimeKind.Local).AddTicks(945),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 5,
                            Status = 3
                        },
                        new
                        {
                            Id = 29,
                            AppointmentDate = new DateTime(1999, 1, 11, 19, 22, 39, 398, DateTimeKind.Local).AddTicks(2903),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            IsDeleted = false,
                            PatientId = 18,
                            Status = 1
                        },
                        new
                        {
                            Id = 30,
                            AppointmentDate = new DateTime(2020, 12, 8, 22, 18, 38, 53, DateTimeKind.Local).AddTicks(5963),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            IsDeleted = false,
                            PatientId = 14,
                            Status = 2
                        },
                        new
                        {
                            Id = 31,
                            AppointmentDate = new DateTime(2016, 10, 18, 21, 52, 30, 856, DateTimeKind.Local).AddTicks(361),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 14,
                            Status = 3
                        },
                        new
                        {
                            Id = 32,
                            AppointmentDate = new DateTime(2001, 5, 25, 8, 58, 36, 403, DateTimeKind.Local).AddTicks(4922),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 14,
                            Status = 2
                        },
                        new
                        {
                            Id = 33,
                            AppointmentDate = new DateTime(2003, 1, 31, 8, 37, 37, 701, DateTimeKind.Local).AddTicks(856),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 4,
                            Status = 2
                        },
                        new
                        {
                            Id = 34,
                            AppointmentDate = new DateTime(2015, 12, 3, 14, 31, 48, 223, DateTimeKind.Local).AddTicks(547),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 10,
                            IsDeleted = false,
                            PatientId = 8,
                            Status = 1
                        },
                        new
                        {
                            Id = 35,
                            AppointmentDate = new DateTime(2006, 5, 13, 19, 8, 25, 370, DateTimeKind.Local).AddTicks(1692),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            IsDeleted = false,
                            PatientId = 7,
                            Status = 1
                        },
                        new
                        {
                            Id = 36,
                            AppointmentDate = new DateTime(2013, 6, 27, 3, 23, 16, 314, DateTimeKind.Local).AddTicks(4665),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 6,
                            Status = 2
                        },
                        new
                        {
                            Id = 37,
                            AppointmentDate = new DateTime(2009, 5, 18, 0, 18, 26, 684, DateTimeKind.Local).AddTicks(641),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            IsDeleted = false,
                            PatientId = 2,
                            Status = 3
                        },
                        new
                        {
                            Id = 38,
                            AppointmentDate = new DateTime(2024, 11, 3, 15, 4, 0, 935, DateTimeKind.Local).AddTicks(2181),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            IsDeleted = false,
                            PatientId = 16,
                            Status = 1
                        },
                        new
                        {
                            Id = 39,
                            AppointmentDate = new DateTime(2005, 9, 14, 14, 4, 1, 840, DateTimeKind.Local).AddTicks(7309),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            IsDeleted = false,
                            PatientId = 16,
                            Status = 1
                        },
                        new
                        {
                            Id = 40,
                            AppointmentDate = new DateTime(1997, 2, 7, 6, 17, 16, 752, DateTimeKind.Local).AddTicks(5201),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            IsDeleted = false,
                            PatientId = 8,
                            Status = 2
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Aliquam vero repellat debitis tempore.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 4,
                            UserId = 2,
                            YearsOfExperience = 19
                        },
                        new
                        {
                            Id = 2,
                            About = "Nulla tempore similique et architecto sunt saepe vel est.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 2,
                            UserId = 3,
                            YearsOfExperience = 6
                        },
                        new
                        {
                            Id = 3,
                            About = "Ducimus magni dolores est aut ducimus.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 5,
                            UserId = 4,
                            YearsOfExperience = 13
                        },
                        new
                        {
                            Id = 4,
                            About = "Aliquid facere accusamus rem et consequuntur.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 2,
                            UserId = 5,
                            YearsOfExperience = 14
                        },
                        new
                        {
                            Id = 5,
                            About = "Est voluptates omnis eum vel fugiat excepturi.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 3,
                            UserId = 6,
                            YearsOfExperience = 4
                        },
                        new
                        {
                            Id = 6,
                            About = "Nisi est quia veritatis voluptatibus accusantium blanditiis facere velit.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 1,
                            UserId = 7,
                            YearsOfExperience = 14
                        },
                        new
                        {
                            Id = 7,
                            About = "Quasi facere rerum autem illo possimus.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 2,
                            UserId = 8,
                            YearsOfExperience = 8
                        },
                        new
                        {
                            Id = 8,
                            About = "Minus soluta vero corporis qui sit et voluptas.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 1,
                            UserId = 9,
                            YearsOfExperience = 12
                        },
                        new
                        {
                            Id = 9,
                            About = "Dicta vel recusandae nesciunt doloremque excepturi explicabo voluptas totam aut.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 1,
                            UserId = 10,
                            YearsOfExperience = 8
                        },
                        new
                        {
                            Id = 10,
                            About = "Voluptatem est at molestias nisi facere et ab et.",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            Specialization = 2,
                            UserId = 11,
                            YearsOfExperience = 18
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 12
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 13
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 14
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 15
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 16
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 17
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 18
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 19
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 20
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 21
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 22
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 23
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 24
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 25
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 26
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 27
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 28
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 29
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 30
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            UserId = 31
                        });
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "Admin Address",
                            ConcurrencyStamp = "94007c83-3024-4d4a-8a77-b35f71fb4417",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEORc7bGC+deVrsYiA1NszXLyzBlDv1KeupCuEMern6cmI7E1G3ZN/SHPoZu5zFa5Ng==",
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5bb30bd9-b786-4313-9a47-bfab9f334493",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "237 Rau Valley",
                            ConcurrencyStamp = "05c9eb30-22b9-4207-9755-64f31c4449a8",
                            Email = "Nelda.Beatty21@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Tess Hagenes",
                            LockoutEnabled = false,
                            NormalizedEmail = "NELDA.BEATTY21@HOTMAIL.COM",
                            NormalizedUserName = "NELDA.BEATTY21@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBeE6n2GABc2uTpdrBrQ7IGddZ5yFkHS2Rk71UpSLP47AfXpz2wBuVIDQA/qZCp9oA==",
                            PhoneNumber = "386.292.5786",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99bb14d0-1ff6-4325-8097-ee33d8dd6aff",
                            TwoFactorEnabled = false,
                            UserName = "Nelda.Beatty21@hotmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "934 Murl Cape",
                            ConcurrencyStamp = "06677116-b98b-497f-bd46-ccaa32ec42d4",
                            Email = "Wilfrid12@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Bertha Funk",
                            LockoutEnabled = false,
                            NormalizedEmail = "WILFRID12@HOTMAIL.COM",
                            NormalizedUserName = "WILFRID12@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEv0qiLpkBOEtR82TfRoa4BXLVsbYsWXo1Zf5ctB9dE/UCgPPTi7EiMPSXnQuOyh7Q==",
                            PhoneNumber = "1-693-489-3139 x9981",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "394f41f6-97eb-4798-96cb-a75d64d5dc87",
                            TwoFactorEnabled = false,
                            UserName = "Wilfrid12@hotmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "3154 Gusikowski Shoals",
                            ConcurrencyStamp = "0ab179a2-b9b9-4a65-af31-16a7315859f0",
                            Email = "Tatyana.Beatty75@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Nellie Ruecker",
                            LockoutEnabled = false,
                            NormalizedEmail = "TATYANA.BEATTY75@YAHOO.COM",
                            NormalizedUserName = "TATYANA.BEATTY75@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKOvsW6jYy4LBJkxNtJTel0x6UId7+uIS+8Xl/g4hRVztjFbO2/eug7jxvFrQQdD9g==",
                            PhoneNumber = "1-805-915-5337",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7bd866b3-40ca-4a75-8dc8-d1239f198485",
                            TwoFactorEnabled = false,
                            UserName = "Tatyana.Beatty75@yahoo.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "12957 Raoul Gateway",
                            ConcurrencyStamp = "23c7edf8-2993-4f51-8739-5e7a594c6a9e",
                            Email = "Kelton19@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Rosalinda Hayes",
                            LockoutEnabled = false,
                            NormalizedEmail = "KELTON19@HOTMAIL.COM",
                            NormalizedUserName = "KELTON19@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKyB4GcfkthZ/JqVyLN9oQT2K54owCTsTunzWQEBktLQm6LT8vHpkmuXkOsTR/M2zw==",
                            PhoneNumber = "(372) 249-1632 x741",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce6fd451-61a9-47a5-9d58-93fb3e9edf41",
                            TwoFactorEnabled = false,
                            UserName = "Kelton19@hotmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "0391 Wuckert Drive",
                            ConcurrencyStamp = "f55de45d-506d-4247-8dce-ee2ee1bb3cc8",
                            Email = "Bonita_Maggio@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Vernie Gleason",
                            LockoutEnabled = false,
                            NormalizedEmail = "BONITA_MAGGIO@YAHOO.COM",
                            NormalizedUserName = "BONITA_MAGGIO@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGFwK9Q7VmlsudWEixK2VOwW0rqFYiwZCD6y4lQAaTzGHNyuy7PpR4mDxCFVb+Nu7Q==",
                            PhoneNumber = "(550) 433-6983",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5717103d-223f-493a-bfc9-e42f7c71dbe5",
                            TwoFactorEnabled = false,
                            UserName = "Bonita_Maggio@yahoo.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "48260 Jackeline Port",
                            ConcurrencyStamp = "e6276069-237d-4f38-a926-f5d058b72d51",
                            Email = "Frank_Langosh@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Marianne Denesik",
                            LockoutEnabled = false,
                            NormalizedEmail = "FRANK_LANGOSH@GMAIL.COM",
                            NormalizedUserName = "FRANK_LANGOSH@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJR0GXwv/dCjtDSIVMb9OCYv0etxfGvAChyQik90szkSsFr2TsSutT0/NLqzcSdIlw==",
                            PhoneNumber = "265-729-1434 x8989",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b99890f-b51e-4fa7-a4d0-92ad21c9b795",
                            TwoFactorEnabled = false,
                            UserName = "Frank_Langosh@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "2307 Karianne Stravenue",
                            ConcurrencyStamp = "18b39181-fbd0-4fa9-8cd5-d470ecb91ea0",
                            Email = "Frederic.Keeling49@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Myrtle Littel",
                            LockoutEnabled = false,
                            NormalizedEmail = "FREDERIC.KEELING49@YAHOO.COM",
                            NormalizedUserName = "FREDERIC.KEELING49@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBcb+175HvjmeZWNi6wy/vp0QUY49GsfRsEPNBxkQBB/pza4UEdFL6q5O+LOCa8tqg==",
                            PhoneNumber = "881.728.2385 x564",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7fbb0492-60fb-4d3e-9359-8fe7a7331a43",
                            TwoFactorEnabled = false,
                            UserName = "Frederic.Keeling49@yahoo.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "451 Smitham Drive",
                            ConcurrencyStamp = "1a94c557-bb10-4421-a7bf-593235b90609",
                            Email = "Miguel.Stark24@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Emil Hegmann",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIGUEL.STARK24@YAHOO.COM",
                            NormalizedUserName = "MIGUEL.STARK24@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPW84hwRmQCFg/uHURXJfE9ShATbPwrnuKet0N0jQ7xI/T4SUtd6PtVIdxg5TgMzPw==",
                            PhoneNumber = "798-424-2955 x399",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f47a416a-196c-43ab-b808-8ddb6eabdacf",
                            TwoFactorEnabled = false,
                            UserName = "Miguel.Stark24@yahoo.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "4840 Leuschke Plains",
                            ConcurrencyStamp = "008be66e-ba61-4e7f-991e-3f1f2391326a",
                            Email = "Darrell.Lakin@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Alyson Larson",
                            LockoutEnabled = false,
                            NormalizedEmail = "DARRELL.LAKIN@YAHOO.COM",
                            NormalizedUserName = "DARRELL.LAKIN@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJUrhL29ueW7ILqY6hFy0cbzTydCSbq1q2Jr/RWguB4ZyhBHun6/IBbqap7z8aRYhg==",
                            PhoneNumber = "(267) 887-1121",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92d9d3ac-d912-44a0-ab21-d98c87a7f235",
                            TwoFactorEnabled = false,
                            UserName = "Darrell.Lakin@yahoo.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "471 Santino Turnpike",
                            ConcurrencyStamp = "c06ade12-cec7-46b6-ae35-442aa4b2d81c",
                            Email = "Fidel74@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Troy Koch",
                            LockoutEnabled = false,
                            NormalizedEmail = "FIDEL74@YAHOO.COM",
                            NormalizedUserName = "FIDEL74@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEH4boPPNx9Pwq98QiFbRSVW3R3XicVSivOAdMJRi1fy39Z8Rh416yyENM6ecw8UyRw==",
                            PhoneNumber = "(271) 515-9499",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b13dd230-ab0d-4219-aa8e-d660eff9be35",
                            TwoFactorEnabled = false,
                            UserName = "Fidel74@yahoo.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "7622 Collier Forge",
                            ConcurrencyStamp = "68b6963f-7200-4869-a9d7-53daaf43b9ee",
                            Email = "Gracie_Gleichner34@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Randal Waelchi",
                            LockoutEnabled = false,
                            NormalizedEmail = "GRACIE_GLEICHNER34@GMAIL.COM",
                            NormalizedUserName = "GRACIE_GLEICHNER34@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGW6hPHoYEfpxltXbT6pUuqPZHulAmmeGTslC0HxQSflDx1y44fNbuydSRMq9dK6+Q==",
                            PhoneNumber = "671.963.6357",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c4fb973-203f-45ae-87c0-1a1b1bd03c9a",
                            TwoFactorEnabled = false,
                            UserName = "Gracie_Gleichner34@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "30364 Sawayn Brooks",
                            ConcurrencyStamp = "c31440f6-2f57-403d-b4a1-80cc118da61e",
                            Email = "Cassandra.Langosh39@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Luz Wilderman",
                            LockoutEnabled = false,
                            NormalizedEmail = "CASSANDRA.LANGOSH39@HOTMAIL.COM",
                            NormalizedUserName = "CASSANDRA.LANGOSH39@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPE3AMI9wCwVQVT7Olh4tTjtGn9Mhv3eaVpyoM75JwacAeBtBFeRa1w8iyw0+XLdgg==",
                            PhoneNumber = "376-258-9676",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f0ee7a9-852d-4ad4-a300-67cb80c92f27",
                            TwoFactorEnabled = false,
                            UserName = "Cassandra.Langosh39@hotmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "88971 Antonina Forks",
                            ConcurrencyStamp = "0ef99e28-c599-4d14-977b-d8821e767e6b",
                            Email = "Terrill.McKenzie@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Paolo Runolfsdottir",
                            LockoutEnabled = false,
                            NormalizedEmail = "TERRILL.MCKENZIE@YAHOO.COM",
                            NormalizedUserName = "TERRILL.MCKENZIE@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPEKhGLBVuRue4+DEzC5IdTaRi9zA1Sv3w+3k5VpmGbxK5hixgYfdPUdjOT+zb9W8A==",
                            PhoneNumber = "1-533-202-7814 x0682",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "540d4ff3-a251-4207-9503-7c3c8e5a6877",
                            TwoFactorEnabled = false,
                            UserName = "Terrill.McKenzie@yahoo.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "379 Jones Junction",
                            ConcurrencyStamp = "c8574b3d-eb0c-4d10-9b34-7d904b1f686a",
                            Email = "Leilani_Medhurst87@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Xander Kerluke",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEILANI_MEDHURST87@YAHOO.COM",
                            NormalizedUserName = "LEILANI_MEDHURST87@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDdfgnnvuwEtGQ+le3HK6c4jqLCaLHfLg4kvm4pOicDGm+ivewp/jIvKugWSxRsWzg==",
                            PhoneNumber = "477-354-1196 x024",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6caedc93-20ad-4517-8ebf-ccff36a482d4",
                            TwoFactorEnabled = false,
                            UserName = "Leilani_Medhurst87@yahoo.com"
                        },
                        new
                        {
                            Id = 16,
                            AccessFailedCount = 0,
                            Address = "87381 Beier Mountain",
                            ConcurrencyStamp = "f1577a5c-827f-411b-8b1b-a6549c544ccb",
                            Email = "Sadye.Reynolds@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Esmeralda Welch",
                            LockoutEnabled = false,
                            NormalizedEmail = "SADYE.REYNOLDS@HOTMAIL.COM",
                            NormalizedUserName = "SADYE.REYNOLDS@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3Uau8f4VlVrHOdLeKheBodNxXOq9W0etls4c4f9ZfMPSFL46q5YechOu5eOHiRaQ==",
                            PhoneNumber = "(425) 384-6812 x2371",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "356012c0-973d-4055-aea1-59ef8947785c",
                            TwoFactorEnabled = false,
                            UserName = "Sadye.Reynolds@hotmail.com"
                        },
                        new
                        {
                            Id = 17,
                            AccessFailedCount = 0,
                            Address = "38100 Sporer Motorway",
                            ConcurrencyStamp = "3937a063-0d91-4981-85c3-7bbd4a6ea0f5",
                            Email = "Ethel13@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Marcelino Macejkovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ETHEL13@HOTMAIL.COM",
                            NormalizedUserName = "ETHEL13@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIe6NGz1YTENY2K5T7gpoxenneSrvneYkk/wtz3eUyoUi38hA06rKMeFhA1SqUr/+A==",
                            PhoneNumber = "232.589.7860 x291",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68e0d4a0-ff5d-4acc-93b5-5f2b525c6739",
                            TwoFactorEnabled = false,
                            UserName = "Ethel13@hotmail.com"
                        },
                        new
                        {
                            Id = 18,
                            AccessFailedCount = 0,
                            Address = "633 Whitney Plaza",
                            ConcurrencyStamp = "c5f56100-df6c-4890-bfab-4bf7aae0d7e4",
                            Email = "Maya.Jacobs@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Daphne Schulist",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAYA.JACOBS@GMAIL.COM",
                            NormalizedUserName = "MAYA.JACOBS@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKKKgzIH8FBMSAOuVn+doOXsMnOtwLOf1IgSwWIaTwlsdfvTuCUAH24c3DX/j+/G7g==",
                            PhoneNumber = "1-700-267-5843 x34253",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a59aad5-3fe5-4e5e-8525-a2a15ac322b2",
                            TwoFactorEnabled = false,
                            UserName = "Maya.Jacobs@gmail.com"
                        },
                        new
                        {
                            Id = 19,
                            AccessFailedCount = 0,
                            Address = "3707 Strosin Villages",
                            ConcurrencyStamp = "c92416e5-1f12-4019-8176-313947e71fc2",
                            Email = "Issac.Halvorson38@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Roberta Walsh",
                            LockoutEnabled = false,
                            NormalizedEmail = "ISSAC.HALVORSON38@GMAIL.COM",
                            NormalizedUserName = "ISSAC.HALVORSON38@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKrnPGUdWsnyFBN/DfFv/wQefSGdTgh6Seqz+/ghlUciNYAvvNPlVdIFGV1FgoyxVg==",
                            PhoneNumber = "673.721.4367",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd0269c1-eb02-4501-8d80-032e4e30ced3",
                            TwoFactorEnabled = false,
                            UserName = "Issac.Halvorson38@gmail.com"
                        },
                        new
                        {
                            Id = 20,
                            AccessFailedCount = 0,
                            Address = "09793 Melissa Centers",
                            ConcurrencyStamp = "f79f9cbf-f057-4559-ba58-9587700a912d",
                            Email = "Noemi.Koch83@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Electa Will",
                            LockoutEnabled = false,
                            NormalizedEmail = "NOEMI.KOCH83@YAHOO.COM",
                            NormalizedUserName = "NOEMI.KOCH83@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBsPwTlT6Ge3F4wtxbHgSCIepvlfojbSs0ZqZb3ILoDhCI0BtM2E+wjv+YL7OkR5jw==",
                            PhoneNumber = "1-208-846-1429",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f24ce1df-3d5f-4b48-b25d-bc1041f42e25",
                            TwoFactorEnabled = false,
                            UserName = "Noemi.Koch83@yahoo.com"
                        },
                        new
                        {
                            Id = 21,
                            AccessFailedCount = 0,
                            Address = "958 Padberg Dam",
                            ConcurrencyStamp = "29ba0cc0-974a-49af-b158-53530dbdda4f",
                            Email = "Jaden.Mraz46@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Rocio Koch",
                            LockoutEnabled = false,
                            NormalizedEmail = "JADEN.MRAZ46@GMAIL.COM",
                            NormalizedUserName = "JADEN.MRAZ46@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOnzJhV0SwxUKFTThOqL7pKoVRynmVzc59nQFQGTYIoDkIsndkZ12f64OMr4d+Vgdg==",
                            PhoneNumber = "429.780.3939 x016",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e323c78c-0bdb-428d-9551-62177d3aee52",
                            TwoFactorEnabled = false,
                            UserName = "Jaden.Mraz46@gmail.com"
                        },
                        new
                        {
                            Id = 22,
                            AccessFailedCount = 0,
                            Address = "4116 Kuvalis Skyway",
                            ConcurrencyStamp = "2ffc08ac-76b1-45a1-a54c-6ce3c0c0278c",
                            Email = "Trevion.Schuster55@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Heather Terry",
                            LockoutEnabled = false,
                            NormalizedEmail = "TREVION.SCHUSTER55@YAHOO.COM",
                            NormalizedUserName = "TREVION.SCHUSTER55@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENwDuPCyH2tTBp0FEu1Jwxb1JrPYJ+2euDuBOUwRd1nJT9DWoZtDcn/tl8okyW86Tg==",
                            PhoneNumber = "681.803.0040 x5351",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c8dabaa-b2e3-4d93-8c53-c6e7f3eb9bef",
                            TwoFactorEnabled = false,
                            UserName = "Trevion.Schuster55@yahoo.com"
                        },
                        new
                        {
                            Id = 23,
                            AccessFailedCount = 0,
                            Address = "00861 Elvie Mission",
                            ConcurrencyStamp = "73a8017a-b49a-4b87-a522-820de44bcb7d",
                            Email = "Lera_Batz@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Bennie Koepp",
                            LockoutEnabled = false,
                            NormalizedEmail = "LERA_BATZ@YAHOO.COM",
                            NormalizedUserName = "LERA_BATZ@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMsYi+Qu0wKfMbuBcpVV87Qflwrb4ErNgL1L6NALV2LQJD5n8xb2MS7GfFplfo9/MA==",
                            PhoneNumber = "(265) 239-5938",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30a2786e-f01a-4765-8e72-0983222969fe",
                            TwoFactorEnabled = false,
                            UserName = "Lera_Batz@yahoo.com"
                        },
                        new
                        {
                            Id = 24,
                            AccessFailedCount = 0,
                            Address = "199 Brook Stream",
                            ConcurrencyStamp = "f784bf99-f26c-47b9-8ba0-e1f3808a6366",
                            Email = "Assunta69@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Mina Brakus",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASSUNTA69@HOTMAIL.COM",
                            NormalizedUserName = "ASSUNTA69@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELkwBdpdG+zhCfhREFK+mvtnM2C87RWIlBXLVhXrbtroMNG5o4oEwaMvxhig/49QHA==",
                            PhoneNumber = "345.970.8297 x669",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2f3e2f7-b425-4dfa-af6a-3a5b0c2a98e7",
                            TwoFactorEnabled = false,
                            UserName = "Assunta69@hotmail.com"
                        },
                        new
                        {
                            Id = 25,
                            AccessFailedCount = 0,
                            Address = "5028 Quinn Street",
                            ConcurrencyStamp = "5a3a60ed-482c-4940-bed6-db00d3217505",
                            Email = "Deja86@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Krystina Dibbert",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEJA86@YAHOO.COM",
                            NormalizedUserName = "DEJA86@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECFyRugoz4dgVhdwvKMjiy47/LCHroBtke+iZajgaqKBVpLQd2AAPRRD+9YH+Tql+Q==",
                            PhoneNumber = "379.595.0326",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bddd0e2-5c64-49c6-b043-8976b4e45b3b",
                            TwoFactorEnabled = false,
                            UserName = "Deja86@yahoo.com"
                        },
                        new
                        {
                            Id = 26,
                            AccessFailedCount = 0,
                            Address = "4978 Kunze Harbor",
                            ConcurrencyStamp = "9fe051eb-d304-4995-8f2e-4b7c5d540ba1",
                            Email = "Corbin0@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Daren Strosin",
                            LockoutEnabled = false,
                            NormalizedEmail = "CORBIN0@HOTMAIL.COM",
                            NormalizedUserName = "CORBIN0@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIK0WrJ2Igq22nyyyxjemqn8v8C8uWa77ZJVx/DOmlDMeCeQU/oaL2PPJzL45XxWGQ==",
                            PhoneNumber = "947.492.1521 x082",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b3900445-92c1-4cbf-b638-9ffc7668c848",
                            TwoFactorEnabled = false,
                            UserName = "Corbin0@hotmail.com"
                        },
                        new
                        {
                            Id = 27,
                            AccessFailedCount = 0,
                            Address = "08779 Baumbach Plaza",
                            ConcurrencyStamp = "de33fdd5-d4f1-4c14-bbac-e74fca0a3dd3",
                            Email = "Leonie80@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Fiona Crona",
                            LockoutEnabled = false,
                            NormalizedEmail = "LEONIE80@GMAIL.COM",
                            NormalizedUserName = "LEONIE80@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAC/1T+tohDwN5sFH35Alnbl8fkez2FZlStXl5LJiXL2GwsycrJ+apM9CLjLKKpc0A==",
                            PhoneNumber = "1-715-785-5841 x290",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3168f25a-8e31-4dad-922d-fd529777303a",
                            TwoFactorEnabled = false,
                            UserName = "Leonie80@gmail.com"
                        },
                        new
                        {
                            Id = 28,
                            AccessFailedCount = 0,
                            Address = "3570 Ernser Ports",
                            ConcurrencyStamp = "09e8a6cf-9e80-49bd-9a54-050fbe6720bc",
                            Email = "Penelope.Fisher25@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Dayne Berge",
                            LockoutEnabled = false,
                            NormalizedEmail = "PENELOPE.FISHER25@GMAIL.COM",
                            NormalizedUserName = "PENELOPE.FISHER25@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOoL35pF+/bbFHYWgw2L0eP5p9W+MMxDF5icrYQ3uNnrKFEbwoRabns9a73P2XbwiQ==",
                            PhoneNumber = "(454) 512-5946",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6fb71cf-35ef-4f8e-ae46-31d59459aa5d",
                            TwoFactorEnabled = false,
                            UserName = "Penelope.Fisher25@gmail.com"
                        },
                        new
                        {
                            Id = 29,
                            AccessFailedCount = 0,
                            Address = "7071 Ritchie Heights",
                            ConcurrencyStamp = "1c992531-2a63-4516-9637-5d896fd687ef",
                            Email = "Arlo_Schumm@hotmail.com",
                            EmailConfirmed = true,
                            FullName = "Gordon Douglas",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARLO_SCHUMM@HOTMAIL.COM",
                            NormalizedUserName = "ARLO_SCHUMM@HOTMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEafqGk1BOM/V4Mnh8kt7bQK6PTargqiYnphj2D01d7esMHyWr5bOkvSXDDzI8iURw==",
                            PhoneNumber = "974-579-9035 x483",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0d4b9040-4237-4fdf-9f58-60d52dfcf304",
                            TwoFactorEnabled = false,
                            UserName = "Arlo_Schumm@hotmail.com"
                        },
                        new
                        {
                            Id = 30,
                            AccessFailedCount = 0,
                            Address = "259 Kertzmann Road",
                            ConcurrencyStamp = "da6b86b8-cc7e-4982-acc2-982cfbcad489",
                            Email = "Arlo_Ernser79@yahoo.com",
                            EmailConfirmed = true,
                            FullName = "Heather Roberts",
                            LockoutEnabled = false,
                            NormalizedEmail = "ARLO_ERNSER79@YAHOO.COM",
                            NormalizedUserName = "ARLO_ERNSER79@YAHOO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDjALJN6sya63e0YNFLmBNAJHaEaKQLx5EaNB6e8cVHTniotQFuElbdTgcp3Yc+oKg==",
                            PhoneNumber = "(932) 838-0968 x08962",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa17438c-fb1a-4840-94df-1217bcebbf6e",
                            TwoFactorEnabled = false,
                            UserName = "Arlo_Ernser79@yahoo.com"
                        },
                        new
                        {
                            Id = 31,
                            AccessFailedCount = 0,
                            Address = "0089 Retta Lodge",
                            ConcurrencyStamp = "e6ce76c6-6d88-472d-969b-086233760f32",
                            Email = "Creola_Steuber@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Christy Harber",
                            LockoutEnabled = false,
                            NormalizedEmail = "CREOLA_STEUBER@GMAIL.COM",
                            NormalizedUserName = "CREOLA_STEUBER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA3Pm4zE2BM1PdGnYttRjtmA4wWOx9volwGQifwQwRAuxjOXxqWmTEUI/FV3octA1w==",
                            PhoneNumber = "770.205.4429 x646",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "74070d76-d119-4e51-8ab7-f280144f4a98",
                            TwoFactorEnabled = false,
                            UserName = "Creola_Steuber@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Doctor",
                            NormalizedName = "DOCTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 16,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 17,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 18,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 19,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 20,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 21,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 22,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 23,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 24,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 25,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 26,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 27,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 28,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 29,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 30,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 31,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DoctorAppointment.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Doctor", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.User", "User")
                        .WithOne("Doctor")
                        .HasForeignKey("DoctorAppointment.Domain.Entities.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Patient", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("DoctorAppointment.Domain.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorAppointment.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DoctorAppointment.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("DoctorAppointment.Domain.Entities.User", b =>
                {
                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });
#pragma warning restore 612, 618
        }
    }
}
